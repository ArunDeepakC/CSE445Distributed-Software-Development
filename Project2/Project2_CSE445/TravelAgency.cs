using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

/// CONTRIBUTION:
/// Name:   Rishti Gupta
/// ASUID:  1217211814
/// Email:  rgupta75@asu.edu
/// Class:  CSE-445 (#96279)

namespace Project2_CSE445
{
    class TravelAgency
    {
        // Array of Credit Cards 
        private static readonly long[] CREDIT_CARDS =
        {
            4916039504020044,   // VISA
            5289332084535168,   // MasterCard
            3553991022581867,    // JCB
            6011354933529823,   // Discover
            30366099125857,     // Diner's Club
            374951333742767,    // AMEX
            
        };

        private static bool parksActive = true;
        private static Random rnd = new Random(); // Random number generator
        private bool ticketsNeeded = true;
        private bool orderAmount = false;
        private double unitPrice;
        private string parkId;

        public void Run()
        {
            // Continue thread till Park Threads are running
            while (parksActive)
            {
                // Create order if the travel agency has some amount of tickets to be ordered
                if (ticketsNeeded)
                {
                    
                    CreateOrder(parkId, unitPrice);
                }
                else
                {
                    // Allow the Thread to sleep if no orders are needed 
                    Console.WriteLine("WAITING: Travel Agency Thread ({0})", Thread.CurrentThread.Name);
                    Thread.Sleep(1000);
                    ticketsNeeded = true;
                }
            }

            Console.WriteLine("CLOSING: Travel Agency Thread ({0})", Thread.CurrentThread.Name);
        }

        // subscibe the travel agency to the price cut event generated by park
        public void Subscribe(Park park)
        {
            Console.WriteLine("SUBSCRIBING TRAVEL AGENCY TO THE PARK: Price Cut Event");
            park.PriceCut += IssueOrder;
        }

        // Order created by Travel Agency
        private void CreateOrder(string parkId, double unitPrice)
        {
            Console.WriteLine("CREATING ORDER FOR : {0}", Thread.CurrentThread.Name);

            // Setting the ticketsNeeded to false as tickets are nomlonegr needed
            ticketsNeeded = false;
            OrderClass order = new OrderClass();

            // setting all the mambers of the order
            order.Amount = rnd.Next(10, 100);
            order.CardNo = CREDIT_CARDS[rnd.Next(0, CREDIT_CARDS.Length)];
            order.SenderId = Thread.CurrentThread.Name;
            order.ReceiverId = parkId;
            order.UnitPrice = unitPrice;

            Program.mcb.setOneCell(Encoder.EncodeOrder(order));
        }

        // issuing an order and setting the id and price via price cut event created 
        public void IssueOrder(PriceCutEventArgs e)
        {
            orderAmount = true;
            parkId = e.Id;
            unitPrice = e.Price;
        }

        public void orderProcessed(OrderClass order, double final_price) // Event handler when the order is processed
        {
            Console.WriteLine("Callback for confirmation to {0} for a total price {1}", order.SenderId, final_price);
        }

        // getter-setter for active park threads
        public static bool ParksActive
        {
            get { return TravelAgency.parksActive; }
            set { TravelAgency.parksActive = value; }
        }


    }
}
